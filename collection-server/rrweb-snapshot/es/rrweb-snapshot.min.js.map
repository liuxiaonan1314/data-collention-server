{"version":3,"file":"rrweb-snapshot.min.js","sources":["../src/types.ts","../src/snapshot.ts","../src/css.ts","../src/rebuild.ts"],"sourcesContent":["export enum NodeType {\n  Document,\n  DocumentType,\n  Element,\n  Text,\n  CDATA,\n  Comment,\n}\n\nexport type documentNode = {\n  type: NodeType.Document;\n  childNodes: serializedNodeWithId[];\n};\n\nexport type documentTypeNode = {\n  type: NodeType.DocumentType;\n  name: string;\n  publicId: string;\n  systemId: string;\n};\n\nexport type attributes = {\n  [key: string]: string | boolean;\n};\nexport type elementNode = {\n  type: NodeType.Element;\n  tagName: string;\n  attributes: attributes;\n  childNodes: serializedNodeWithId[];\n  isSVG?: true;\n  needBlock?: boolean;\n};\n\nexport type textNode = {\n  type: NodeType.Text;\n  textContent: string;\n  isStyle?: true;\n};\n\nexport type cdataNode = {\n  type: NodeType.CDATA;\n  textContent: '';\n};\n\nexport type commentNode = {\n  type: NodeType.Comment;\n  textContent: string;\n};\n\nexport type serializedNode =\n  | documentNode\n  | documentTypeNode\n  | elementNode\n  | textNode\n  | cdataNode\n  | commentNode;\n\nexport type serializedNodeWithId = serializedNode & { id: number };\n\nexport type tagMap = {\n  [key: string]: string;\n};\n\nexport interface INode extends Node {\n  __sn: serializedNodeWithId;\n}\n\nexport type idNodeMap = {\n  [key: number]: INode;\n};\n","import {\n  serializedNode,\n  serializedNodeWithId,\n  NodeType,\n  attributes,\n  INode,\n  idNodeMap,\n} from './types';\n\nlet _id = 1;\nconst symbolAndNumberRegex = RegExp('[^a-z1-6\\-]');\n\nfunction genId(): number {\n  return _id++;\n}\n\nfunction getValidTagName(tagName: string): string {\n  const processedTagName = tagName.toLowerCase().trim();\n\n  if (symbolAndNumberRegex.test(processedTagName)) {\n    // if the tag name is odd and we cannot extract\n    // anything from the string, then we return a\n    // generic div\n    return 'div';\n  }\n\n  return processedTagName;\n}\n\nfunction getCssRulesString(s: CSSStyleSheet): string | null {\n  try {\n    const rules = s.rules || s.cssRules;\n    return rules\n      ? Array.from(rules).reduce(\n        (prev, cur) => prev + getCssRuleString(cur),\n        '',\n      )\n      : null;\n  } catch (error) {\n    return null;\n  }\n}\n\nfunction getCssRuleString(rule: CSSRule): string {\n  return isCSSImportRule(rule)\n    ? getCssRulesString(rule.styleSheet) || ''\n    : rule.cssText;\n}\n\nfunction isCSSImportRule(rule: CSSRule): rule is CSSImportRule {\n  return 'styleSheet' in rule;\n}\n\nfunction extractOrigin(url: string): string {\n  let origin;\n  if (url.indexOf('//') > -1) {\n    origin = url\n      .split('/')\n      .slice(0, 3)\n      .join('/');\n  } else {\n    origin = url.split('/')[0];\n  }\n  origin = origin.split('?')[0];\n  return origin;\n}\n\nconst URL_IN_CSS_REF = /url\\((?:'([^']*)'|\"([^\"]*)\"|([^)]*))\\)/gm;\nconst RELATIVE_PATH = /^(?!www\\.|(?:http|ftp)s?:\\/\\/|[A-Za-z]:\\\\|\\/\\/).*/;\nconst DATA_URI = /^(data:)([\\w\\/\\+\\-]+);(charset=[\\w-]+|base64).*,(.*)/i;\nexport function absoluteToStylesheet(\n  cssText: string | null,\n  href: string,\n): string {\n  return (cssText || '').replace(\n    URL_IN_CSS_REF,\n    (origin, path1, path2, path3) => {\n      const filePath = path1 || path2 || path3;\n      if (!filePath) {\n        return origin;\n      }\n      if (!RELATIVE_PATH.test(filePath)) {\n        return `url('${filePath}')`;\n      }\n      if (DATA_URI.test(filePath)) {\n        return `url(${filePath})`;\n      }\n      if (filePath[0] === '/') {\n        return `url('${extractOrigin(href) + filePath}')`;\n      }\n      const stack = href.split('/');\n      const parts = filePath.split('/');\n      stack.pop();\n      for (const part of parts) {\n        if (part === '.') {\n          continue;\n        } else if (part === '..') {\n          stack.pop();\n        } else {\n          stack.push(part);\n        }\n      }\n      return `url('${stack.join('/')}')`;\n    },\n  );\n}\n\nfunction getAbsoluteSrcsetString(doc: Document, attributeValue: string) {\n  if (attributeValue.trim() === '') {\n    return attributeValue;\n  }\n\n  const srcsetValues = attributeValue.split(',');\n  // srcset attributes is defined as such:\n  // srcset = \"url size,url1 size1\"\n  const resultingSrcsetString = srcsetValues\n    .map(srcItem => {\n      // removing all but middle spaces\n      const trimmedSrcItem = srcItem.trimLeft().trimRight();\n      const urlAndSize = trimmedSrcItem.split(' ');\n      // this means we have both 0:url and 1:size\n      if (urlAndSize.length === 2) {\n        const absUrl = absoluteToDoc(doc, urlAndSize[0]);\n        return `${absUrl} ${urlAndSize[1]}`;\n      } else if (urlAndSize.length === 1) {\n        const absUrl = absoluteToDoc(doc, urlAndSize[0]);\n        return `${absUrl}`;\n      }\n      return '';\n    })\n    .join(',');\n\n  return resultingSrcsetString;\n}\n\nexport function absoluteToDoc(doc: Document, attributeValue: string): string {\n  if (!attributeValue || attributeValue.trim() === '') {\n    return attributeValue;\n  }\n  const a: HTMLAnchorElement = doc.createElement('a');\n  a.href = attributeValue;\n  return a.href;\n}\n\nfunction isSVGElement(el: Element): boolean {\n  return el.tagName === 'svg' || el instanceof SVGElement;\n}\n\nexport function transformAttribute(\n  doc: Document,\n  name: string,\n  value: string,\n): string {\n  // relative path in attribute\n  if (name === 'src' || (name === 'href' && value)) {\n    return absoluteToDoc(doc, value);\n  } else if (name === 'srcset' && value) {\n    return getAbsoluteSrcsetString(doc, value);\n  } else if (name === 'style' && value) {\n    return absoluteToStylesheet(value, location.href);\n  } else {\n    return value;\n  }\n}\n\nfunction serializeNode(\n  n: Node,\n  doc: Document,\n  blockClass: string | RegExp,\n  inlineStylesheet: boolean,\n  maskAllInputs: boolean,\n): serializedNode | false {\n  switch (n.nodeType) {\n    case n.DOCUMENT_NODE:\n      return {\n        type: NodeType.Document,\n        childNodes: [],\n      };\n    case n.DOCUMENT_TYPE_NODE:\n      return {\n        type: NodeType.DocumentType,\n        name: (n as DocumentType).name,\n        publicId: (n as DocumentType).publicId,\n        systemId: (n as DocumentType).systemId,\n      };\n    case n.ELEMENT_NODE:\n      let needBlock = false;\n      if (typeof blockClass === 'string') {\n        needBlock = (n as HTMLElement).classList.contains(blockClass);\n      } else {\n        (n as HTMLElement).classList.forEach(className => {\n          if (blockClass.test(className)) {\n            needBlock = true;\n          }\n        });\n      }\n      const tagName = getValidTagName((n as HTMLElement).tagName);\n      let attributes: attributes = {};\n      for (const { name, value } of Array.from((n as HTMLElement).attributes)) {\n        attributes[name] = transformAttribute(doc, name, value);\n      }\n      // remote css\n      if (tagName === 'link' && inlineStylesheet) {\n        const stylesheet = Array.from(doc.styleSheets).find(s => {\n          return s.href === (n as HTMLLinkElement).href;\n        });\n        const cssText = getCssRulesString(stylesheet as CSSStyleSheet);\n        if (cssText) {\n          delete attributes.rel;\n          delete attributes.href;\n          attributes._cssText = absoluteToStylesheet(\n            cssText,\n            stylesheet!.href!,\n          );\n        }\n      }\n      // dynamic stylesheet\n      if (\n        tagName === 'style' &&\n        (n as HTMLStyleElement).sheet &&\n        // TODO: Currently we only try to get dynamic stylesheet when it is an empty style element\n        !(\n          (n as HTMLElement).innerText ||\n          (n as HTMLElement).textContent ||\n          ''\n        ).trim().length\n      ) {\n        const cssText = getCssRulesString(\n          (n as HTMLStyleElement).sheet as CSSStyleSheet,\n        );\n        if (cssText) {\n          attributes._cssText = absoluteToStylesheet(cssText, location.href);\n        }\n      }\n      // form fields\n      if (\n        tagName === 'input' ||\n        tagName === 'textarea' ||\n        tagName === 'select'\n      ) {\n        const value = (n as HTMLInputElement | HTMLTextAreaElement).value;\n        if (\n          attributes.type !== 'radio' &&\n          attributes.type !== 'checkbox' &&\n          value\n        ) {\n          attributes.value = maskAllInputs ? '*'.repeat(value.length) : value;\n        } else if ((n as HTMLInputElement).checked) {\n          attributes.checked = (n as HTMLInputElement).checked;\n        }\n      }\n      if (tagName === 'option') {\n        const selectValue = (n as HTMLOptionElement).parentElement;\n        if (attributes.value === (selectValue as HTMLSelectElement).value) {\n          attributes.selected = (n as HTMLOptionElement).selected;\n        }\n      }\n      // canvas image data\n      if (tagName === 'canvas') {\n        attributes.rr_dataURL = (n as HTMLCanvasElement).toDataURL();\n      }\n      // media elements\n      if (tagName === 'audio' || tagName === 'video') {\n        attributes.rr_mediaState = (n as HTMLMediaElement).paused\n          ? 'paused'\n          : 'played';\n      }\n      if (needBlock) {\n        const { width, height } = (n as HTMLElement).getBoundingClientRect();\n        attributes.rr_width = `${width}px`;\n        attributes.rr_height = `${height}px`;\n      }\n      return {\n        type: NodeType.Element,\n        tagName,\n        attributes,\n        childNodes: [],\n        isSVG: isSVGElement(n as Element) || undefined,\n        needBlock,\n      };\n    case n.TEXT_NODE:\n      // The parent node may not be a html element which has a tagName attribute.\n      // So just let it be undefined which is ok in this use case.\n      const parentTagName =\n        n.parentNode && (n.parentNode as HTMLElement).tagName;\n      let textContent = (n as Text).textContent;\n      const isStyle = parentTagName === 'STYLE' ? true : undefined;\n      if (isStyle && textContent) {\n        textContent = absoluteToStylesheet(textContent, location.href);\n      }\n      if (parentTagName === 'SCRIPT') {\n        textContent = 'SCRIPT_PLACEHOLDER';\n      }\n      return {\n        type: NodeType.Text,\n        textContent: textContent || '',\n        isStyle,\n      };\n    case n.CDATA_SECTION_NODE:\n      return {\n        type: NodeType.CDATA,\n        textContent: '',\n      };\n    case n.COMMENT_NODE:\n      return {\n        type: NodeType.Comment,\n        textContent: (n as Comment).textContent || '',\n      };\n    default:\n      return false;\n  }\n}\n\nexport function serializeNodeWithId(\n  n: Node | INode,\n  doc: Document,\n  map: idNodeMap,\n  blockClass: string | RegExp,\n  skipChild = false,\n  inlineStylesheet = true,\n  maskAllInputs = false,\n): serializedNodeWithId | null {\n  const _serializedNode = serializeNode(\n    n,\n    doc,\n    blockClass,\n    inlineStylesheet,\n    maskAllInputs,\n  );\n  if (!_serializedNode) {\n    // TODO: dev only\n    console.warn(n, 'not serialized');\n    return null;\n  }\n  let id;\n  // Try to reuse the previous id\n  if ('__sn' in n) {\n    id = n.__sn.id;\n  } else {\n    id = genId();\n  }\n  const serializedNode = Object.assign(_serializedNode, { id });\n  (n as INode).__sn = serializedNode;\n  map[id] = n as INode;\n  let recordChild = !skipChild;\n  if (serializedNode.type === NodeType.Element) {\n    recordChild = recordChild && !serializedNode.needBlock;\n    // this property was not needed in replay side\n    delete serializedNode.needBlock;\n  }\n  if (\n    (serializedNode.type === NodeType.Document ||\n      serializedNode.type === NodeType.Element) &&\n    recordChild\n  ) {\n    for (const childN of Array.from(n.childNodes)) {\n      const serializedChildNode = serializeNodeWithId(\n        childN,\n        doc,\n        map,\n        blockClass,\n        skipChild,\n        inlineStylesheet,\n        maskAllInputs,\n      );\n      if (serializedChildNode) {\n        serializedNode.childNodes.push(serializedChildNode);\n      }\n    }\n  }\n  return serializedNode;\n}\n\nfunction snapshot(\n  n: Document,\n  blockClass: string | RegExp = 'rr-block',\n  inlineStylesheet = true,\n  maskAllInputs = false,\n): [serializedNodeWithId | null, idNodeMap] {\n  const idNodeMap: idNodeMap = {};\n  return [\n    serializeNodeWithId(\n      n,\n      n,\n      idNodeMap,\n      blockClass,\n      false,\n      inlineStylesheet,\n      maskAllInputs,\n    ),\n    idNodeMap,\n  ];\n}\n\nexport default snapshot;\n","/**\n * This file is a fork of https://github.com/reworkcss/css/blob/master/lib/parse/index.js\n * I fork it because:\n * 1. The css library was built for node.js which does not have tree-shaking supports.\n * 2. Rewrites into typescript give us a better type interface.\n */\n\n/* tslint:disable no-conditional-assignment interface-name no-shadowed-variable */\n\nexport interface ParserOptions {\n  /** Silently fail on parse errors */\n  silent?: boolean;\n  /**\n   * The path to the file containing css.\n   * Makes errors and source maps more helpful, by letting them know where code comes from.\n   */\n  source?: string;\n}\n\n/**\n * Error thrown during parsing.\n */\nexport interface ParserError {\n  /** The full error message with the source position. */\n  message?: string;\n  /** The error message without position. */\n  reason?: string;\n  /** The value of options.source if passed to css.parse. Otherwise undefined. */\n  filename?: string;\n  line?: number;\n  column?: number;\n  /** The portion of code that couldn't be parsed. */\n  source?: string;\n}\n\nexport interface Loc {\n  line?: number;\n  column?: number;\n}\n\n/**\n * Base AST Tree Node.\n */\nexport interface Node {\n  /** The possible values are the ones listed in the Types section on https://github.com/reworkcss/css page. */\n  type?: string;\n  /** A reference to the parent node, or null if the node has no parent. */\n  parent?: Node;\n  /** Information about the position in the source string that corresponds to the node. */\n  position?: {\n    start?: Loc;\n    end?: Loc;\n    /** The value of options.source if passed to css.parse. Otherwise undefined. */\n    source?: string;\n    /** The full source string passed to css.parse. */\n    content?: string;\n  };\n}\n\nexport interface Rule extends Node {\n  /** The list of selectors of the rule, split on commas. Each selector is trimmed from whitespace and comments. */\n  selectors?: string[];\n  /** Array of nodes with the types declaration and comment. */\n  declarations?: Array<Declaration | Comment>;\n}\n\nexport interface Declaration extends Node {\n  /** The property name, trimmed from whitespace and comments. May not be empty. */\n  property?: string;\n  /** The value of the property, trimmed from whitespace and comments. Empty values are allowed. */\n  value?: string;\n}\n\n/**\n * A rule-level or declaration-level comment. Comments inside selectors, properties and values etc. are lost.\n */\nexport interface Comment extends Node {\n  comment?: string;\n}\n\n/**\n * The @charset at-rule.\n */\nexport interface Charset extends Node {\n  /** The part following @charset. */\n  charset?: string;\n}\n\n/**\n * The @custom-media at-rule\n */\nexport interface CustomMedia extends Node {\n  /** The ---prefixed name. */\n  name?: string;\n  /** The part following the name. */\n  media?: string;\n}\n\n/**\n * The @document at-rule.\n */\nexport interface Document extends Node {\n  /** The part following @document. */\n  document?: string;\n  /** The vendor prefix in @document, or undefined if there is none. */\n  vendor?: string;\n  /** Array of nodes with the types rule, comment and any of the at-rule types. */\n  rules?: Array<Rule | Comment | AtRule>;\n}\n\n/**\n * The @font-face at-rule.\n */\nexport interface FontFace extends Node {\n  /** Array of nodes with the types declaration and comment. */\n  declarations?: Array<Declaration | Comment>;\n}\n\n/**\n * The @host at-rule.\n */\nexport interface Host extends Node {\n  /** Array of nodes with the types rule, comment and any of the at-rule types. */\n  rules?: Array<Rule | Comment | AtRule>;\n}\n\n/**\n * The @import at-rule.\n */\nexport interface Import extends Node {\n  /** The part following @import. */\n  import?: string;\n}\n\n/**\n * The @keyframes at-rule.\n */\nexport interface KeyFrames extends Node {\n  /** The name of the keyframes rule. */\n  name?: string;\n  /** The vendor prefix in @keyframes, or undefined if there is none. */\n  vendor?: string;\n  /** Array of nodes with the types keyframe and comment. */\n  keyframes?: Array<KeyFrame | Comment>;\n}\n\nexport interface KeyFrame extends Node {\n  /** The list of \"selectors\" of the keyframe rule, split on commas. Each “selector” is trimmed from whitespace. */\n  values?: string[];\n  /** Array of nodes with the types declaration and comment. */\n  declarations?: Array<Declaration | Comment>;\n}\n\n/**\n * The @media at-rule.\n */\nexport interface Media extends Node {\n  /** The part following @media. */\n  media?: string;\n  /** Array of nodes with the types rule, comment and any of the at-rule types. */\n  rules?: Array<Rule | Comment | AtRule>;\n}\n\n/**\n * The @namespace at-rule.\n */\nexport interface Namespace extends Node {\n  /** The part following @namespace. */\n  namespace?: string;\n}\n\n/**\n * The @page at-rule.\n */\nexport interface Page extends Node {\n  /** The list of selectors of the rule, split on commas. Each selector is trimmed from whitespace and comments. */\n  selectors?: string[];\n  /** Array of nodes with the types declaration and comment. */\n  declarations?: Array<Declaration | Comment>;\n}\n\n/**\n * The @supports at-rule.\n */\nexport interface Supports extends Node {\n  /** The part following @supports. */\n  supports?: string;\n  /** Array of nodes with the types rule, comment and any of the at-rule types. */\n  rules?: Array<Rule | Comment | AtRule>;\n}\n\n/** All at-rules. */\nexport type AtRule =\n  | Charset\n  | CustomMedia\n  | Document\n  | FontFace\n  | Host\n  | Import\n  | KeyFrames\n  | Media\n  | Namespace\n  | Page\n  | Supports;\n\n/**\n * A collection of rules\n */\nexport interface StyleRules {\n  source?: string;\n  /** Array of nodes with the types rule, comment and any of the at-rule types. */\n  rules: Array<Rule | Comment | AtRule>;\n  /** Array of Errors. Errors collected during parsing when option silent is true. */\n  parsingErrors?: ParserError[];\n}\n\n/**\n * The root node returned by css.parse.\n */\nexport interface Stylesheet extends Node {\n  stylesheet?: StyleRules;\n}\n\n// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nconst commentre = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nexport function parse(css: string, options: ParserOptions = {}) {\n  /**\n   * Positional.\n   */\n\n  let lineno = 1;\n  let column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   */\n\n  function updatePosition(str: string) {\n    const lines = str.match(/\\n/g);\n    if (lines) {\n      lineno += lines.length;\n    }\n    let i = str.lastIndexOf('\\n');\n    column = i === -1 ? column + str.length : str.length - i;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   */\n\n  function position() {\n    const start = { line: lineno, column };\n    return (\n      node: Rule | Declaration | Comment | AtRule | Stylesheet | KeyFrame,\n    ) => {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node\n   */\n\n  class Position {\n    public content!: string;\n    public start!: Loc;\n    public end!: Loc;\n    public source?: string;\n\n    constructor(start: Loc) {\n      this.start = start;\n      this.end = { line: lineno, column };\n      this.source = options.source;\n    }\n  }\n\n  /**\n   * Non-enumerable source string\n   */\n\n  Position.prototype.content = css;\n\n  const errorsList: ParserError[] = [];\n\n  function error(msg: string) {\n    const err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg,\n    ) as ParserError;\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = css;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Parse stylesheet.\n   */\n\n  function stylesheet(): Stylesheet {\n    const rulesList = rules();\n\n    return {\n      type: 'stylesheet',\n      stylesheet: {\n        source: options.source,\n        rules: rulesList,\n        parsingErrors: errorsList,\n      },\n    };\n  }\n\n  /**\n   * Opening brace.\n   */\n\n  function open() {\n    return match(/^{\\s*/);\n  }\n\n  /**\n   * Closing brace.\n   */\n\n  function close() {\n    return match(/^}/);\n  }\n\n  /**\n   * Parse ruleset.\n   */\n\n  function rules() {\n    let node: Rule | void;\n    const rules: Rule[] = [];\n    whitespace();\n    comments(rules);\n    while (css.length && css.charAt(0) !== '}' && (node = atrule() || rule())) {\n      if (node !== false) {\n        rules.push(node);\n        comments(rules);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Match `re` and return captures.\n   */\n\n  function match(re: RegExp) {\n    const m = re.exec(css);\n    if (!m) {\n      return;\n    }\n    const str = m[0];\n    updatePosition(str);\n    css = css.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n\n  function whitespace() {\n    match(/^\\s*/);\n  }\n\n  /**\n   * Parse comments;\n   */\n\n  function comments(rules: Rule[] = []) {\n    let c: Comment | void;\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n      c = comment();\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   */\n\n  function comment() {\n    const pos = position();\n    if ('/' !== css.charAt(0) || '*' !== css.charAt(1)) {\n      return;\n    }\n\n    let i = 2;\n    while (\n      '' !== css.charAt(i) &&\n      ('*' !== css.charAt(i) || '/' !== css.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if ('' === css.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    const str = css.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    css = css.slice(i);\n    column += 2;\n\n    return pos({\n      type: 'comment',\n      comment: str,\n    });\n  }\n\n  /**\n   * Parse selector.\n   */\n\n  function selector() {\n    const m = match(/^([^{]+)/);\n    if (!m) {\n      return;\n    }\n    /* @fix Remove all comments from selectors\n     * http://ostermiller.org/findcomment.html */\n    return trim(m[0])\n      .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n      .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, m => {\n        return m.replace(/,/g, '\\u200C');\n      })\n      .split(/\\s*(?![^(]*\\)),\\s*/)\n      .map(s => {\n        return s.replace(/\\u200C/g, ',');\n      });\n  }\n\n  /**\n   * Parse declaration.\n   */\n\n  function declaration(): Declaration | void | never {\n    const pos = position();\n\n    // prop\n    let propMatch = match(/^(\\*?[-#\\/\\*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n    if (!propMatch) {\n      return;\n    }\n    const prop = trim(propMatch[0]);\n\n    // :\n    if (!match(/^:\\s*/)) {\n      return error(`property missing ':'`);\n    }\n\n    // val\n    const val = match(/^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^\\)]*?\\)|[^};])+)/);\n\n    const ret = pos({\n      type: 'declaration',\n      property: prop.replace(commentre, ''),\n      value: val ? trim(val[0]).replace(commentre, '') : '',\n    });\n\n    // ;\n    match(/^[;\\s]*/);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   */\n\n  function declarations() {\n    const decls: Array<object> = [];\n\n    if (!open()) {\n      return error(`missing '{'`);\n    }\n    comments(decls);\n\n    // declarations\n    let decl;\n    while ((decl = declaration())) {\n      if ((decl as unknown) !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n      decl = declaration();\n    }\n\n    if (!close()) {\n      return error(`missing '}'`);\n    }\n    return decls;\n  }\n\n  /**\n   * Parse keyframe.\n   */\n\n  function keyframe() {\n    let m;\n    const vals = [];\n    const pos = position();\n\n    while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n      vals.push(m[1]);\n      match(/^,\\s*/);\n    }\n\n    if (!vals.length) {\n      return;\n    }\n\n    return pos({\n      type: 'keyframe',\n      values: vals,\n      declarations: declarations() as Declaration[],\n    });\n  }\n\n  /**\n   * Parse keyframes.\n   */\n\n  function atkeyframes() {\n    const pos = position();\n    let m = match(/^@([-\\w]+)?keyframes\\s*/);\n\n    if (!m) {\n      return;\n    }\n    const vendor = m[1];\n\n    // identifier\n    m = match(/^([-\\w]+)\\s*/);\n    if (!m) {\n      return error('@keyframes missing name');\n    }\n    const name = m[1];\n\n    if (!open()) {\n      return error(`@keyframes missing '{'`);\n    }\n\n    let frame;\n    let frames = comments();\n    while ((frame = keyframe())) {\n      frames.push(frame);\n      frames = frames.concat(comments());\n    }\n\n    if (!close()) {\n      return error(`@keyframes missing '}'`);\n    }\n\n    return pos({\n      type: 'keyframes',\n      name,\n      vendor,\n      keyframes: frames,\n    });\n  }\n\n  /**\n   * Parse supports.\n   */\n\n  function atsupports() {\n    const pos = position();\n    const m = match(/^@supports *([^{]+)/);\n\n    if (!m) {\n      return;\n    }\n    const supports = trim(m[1]);\n\n    if (!open()) {\n      return error(`@supports missing '{'`);\n    }\n\n    const style = comments().concat(rules());\n\n    if (!close()) {\n      return error(`@supports missing '}'`);\n    }\n\n    return pos({\n      type: 'supports',\n      supports,\n      rules: style,\n    });\n  }\n\n  /**\n   * Parse host.\n   */\n\n  function athost() {\n    const pos = position();\n    const m = match(/^@host\\s*/);\n\n    if (!m) {\n      return;\n    }\n\n    if (!open()) {\n      return error(`@host missing '{'`);\n    }\n\n    const style = comments().concat(rules());\n\n    if (!close()) {\n      return error(`@host missing '}'`);\n    }\n\n    return pos({\n      type: 'host',\n      rules: style,\n    });\n  }\n\n  /**\n   * Parse media.\n   */\n\n  function atmedia() {\n    const pos = position();\n    const m = match(/^@media *([^{]+)/);\n\n    if (!m) {\n      return;\n    }\n    const media = trim(m[1]);\n\n    if (!open()) {\n      return error(`@media missing '{'`);\n    }\n\n    const style = comments().concat(rules());\n\n    if (!close()) {\n      return error(`@media missing '}'`);\n    }\n\n    return pos({\n      type: 'media',\n      media,\n      rules: style,\n    });\n  }\n\n  /**\n   * Parse custom-media.\n   */\n\n  function atcustommedia() {\n    const pos = position();\n    const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n    if (!m) {\n      return;\n    }\n\n    return pos({\n      type: 'custom-media',\n      name: trim(m[1]),\n      media: trim(m[2]),\n    });\n  }\n\n  /**\n   * Parse paged media.\n   */\n\n  function atpage() {\n    const pos = position();\n    const m = match(/^@page */);\n    if (!m) {\n      return;\n    }\n\n    const sel = selector() || [];\n\n    if (!open()) {\n      return error(`@page missing '{'`);\n    }\n    let decls = comments();\n\n    // declarations\n    let decl;\n    while ((decl = declaration())) {\n      decls.push(decl);\n      decls = decls.concat(comments());\n    }\n\n    if (!close()) {\n      return error(`@page missing '}'`);\n    }\n\n    return pos({\n      type: 'page',\n      selectors: sel,\n      declarations: decls,\n    });\n  }\n\n  /**\n   * Parse document.\n   */\n\n  function atdocument() {\n    const pos = position();\n    const m = match(/^@([-\\w]+)?document *([^{]+)/);\n    if (!m) {\n      return;\n    }\n\n    const vendor = trim(m[1]);\n    const doc = trim(m[2]);\n\n    if (!open()) {\n      return error(`@document missing '{'`);\n    }\n\n    const style = comments().concat(rules());\n\n    if (!close()) {\n      return error(`@document missing '}'`);\n    }\n\n    return pos({\n      type: 'document',\n      document: doc,\n      vendor,\n      rules: style,\n    });\n  }\n\n  /**\n   * Parse font-face.\n   */\n\n  function atfontface() {\n    const pos = position();\n    const m = match(/^@font-face\\s*/);\n    if (!m) {\n      return;\n    }\n\n    if (!open()) {\n      return error(`@font-face missing '{'`);\n    }\n    let decls = comments();\n\n    // declarations\n    let decl;\n    while ((decl = declaration())) {\n      decls.push(decl);\n      decls = decls.concat(comments());\n    }\n\n    if (!close()) {\n      return error(`@font-face missing '}'`);\n    }\n\n    return pos({\n      type: 'font-face',\n      declarations: decls,\n    });\n  }\n\n  /**\n   * Parse import\n   */\n\n  const atimport = _compileAtrule('import');\n\n  /**\n   * Parse charset\n   */\n\n  const atcharset = _compileAtrule('charset');\n\n  /**\n   * Parse namespace\n   */\n\n  const atnamespace = _compileAtrule('namespace');\n\n  /**\n   * Parse non-block at-rules\n   */\n\n  function _compileAtrule(name: string) {\n    const re = new RegExp('^@' + name + '\\\\s*([^;]+);');\n    return () => {\n      const pos = position();\n      const m = match(re);\n      if (!m) {\n        return;\n      }\n      const ret: Record<string, string> = { type: name };\n      ret[name] = m[1].trim();\n      return pos(ret);\n    };\n  }\n\n  /**\n   * Parse at rule.\n   */\n\n  function atrule() {\n    if (css[0] !== '@') {\n      return;\n    }\n\n    return (\n      atkeyframes() ||\n      atmedia() ||\n      atcustommedia() ||\n      atsupports() ||\n      atimport() ||\n      atcharset() ||\n      atnamespace() ||\n      atdocument() ||\n      atpage() ||\n      athost() ||\n      atfontface()\n    );\n  }\n\n  /**\n   * Parse rule.\n   */\n\n  function rule() {\n    const pos = position();\n    const sel = selector();\n\n    if (!sel) {\n      return error('selector missing');\n    }\n    comments();\n\n    return pos({\n      type: 'rule',\n      selectors: sel,\n      declarations: declarations() as Declaration[],\n    });\n  }\n\n  return addParent(stylesheet());\n}\n\n/**\n * Trim `str`.\n */\n\nfunction trim(str: string) {\n  return str ? str.replace(/^\\s+|\\s+$/g, '') : '';\n}\n\n/**\n * Adds non-enumerable parent node reference to each node.\n */\n\nfunction addParent(obj: Stylesheet, parent?: Stylesheet) {\n  const isNode = obj && typeof obj.type === 'string';\n  const childParent = isNode ? obj : parent;\n\n  for (const k of Object.keys(obj)) {\n    const value = obj[k as keyof Stylesheet];\n    if (Array.isArray(value)) {\n      value.forEach(v => {\n        addParent(v, childParent);\n      });\n    } else if (value && typeof value === 'object') {\n      addParent((value as unknown) as Stylesheet, childParent);\n    }\n  }\n\n  if (isNode) {\n    Object.defineProperty(obj, 'parent', {\n      configurable: true,\n      writable: true,\n      enumerable: false,\n      value: parent || null,\n    });\n  }\n\n  return obj;\n}\n","import { parse } from './css';\nimport {\n  serializedNodeWithId,\n  NodeType,\n  tagMap,\n  elementNode,\n  idNodeMap,\n  INode,\n} from './types';\n\nconst tagMap: tagMap = {\n  script: 'noscript',\n  // camel case svg element tag names\n  altglyph: 'altGlyph',\n  altglyphdef: 'altGlyphDef',\n  altglyphitem: 'altGlyphItem',\n  animatecolor: 'animateColor',\n  animatemotion: 'animateMotion',\n  animatetransform: 'animateTransform',\n  clippath: 'clipPath',\n  feblend: 'feBlend',\n  fecolormatrix: 'feColorMatrix',\n  fecomponenttransfer: 'feComponentTransfer',\n  fecomposite: 'feComposite',\n  feconvolvematrix: 'feConvolveMatrix',\n  fediffuselighting: 'feDiffuseLighting',\n  fedisplacementmap: 'feDisplacementMap',\n  fedistantlight: 'feDistantLight',\n  fedropshadow: 'feDropShadow',\n  feflood: 'feFlood',\n  fefunca: 'feFuncA',\n  fefuncb: 'feFuncB',\n  fefuncg: 'feFuncG',\n  fefuncr: 'feFuncR',\n  fegaussianblur: 'feGaussianBlur',\n  feimage: 'feImage',\n  femerge: 'feMerge',\n  femergenode: 'feMergeNode',\n  femorphology: 'feMorphology',\n  feoffset: 'feOffset',\n  fepointlight: 'fePointLight',\n  fespecularlighting: 'feSpecularLighting',\n  fespotlight: 'feSpotLight',\n  fetile: 'feTile',\n  feturbulence: 'feTurbulence',\n  foreignobject: 'foreignObject',\n  glyphref: 'glyphRef',\n  lineargradient: 'linearGradient',\n  radialgradient: 'radialGradient',\n};\nfunction getTagName(n: elementNode): string {\n  let tagName = tagMap[n.tagName] ? tagMap[n.tagName] : n.tagName;\n  if (tagName === 'link' && n.attributes._cssText) {\n    tagName = 'style';\n  }\n  return tagName;\n}\n\nconst HOVER_SELECTOR = /([^\\\\]):hover/g;\nexport function addHoverClass(cssText: string): string {\n  const ast = parse(cssText, { silent: true });\n  if (!ast.stylesheet) {\n    return cssText;\n  }\n  ast.stylesheet.rules.forEach(rule => {\n    if ('selectors' in rule) {\n      (rule.selectors || []).forEach((selector: string) => {\n        if (HOVER_SELECTOR.test(selector)) {\n          const newSelector = selector.replace(HOVER_SELECTOR, '$1.\\\\:hover');\n          cssText = cssText.replace(selector, `${selector}, ${newSelector}`);\n        }\n      });\n    }\n  });\n  return cssText;\n}\n\nfunction buildNode(\n  n: serializedNodeWithId,\n  doc: Document,\n  HACK_CSS: boolean,\n): Node | null {\n  switch (n.type) {\n    case NodeType.Document:\n      return doc.implementation.createDocument(null, '', null);\n    case NodeType.DocumentType:\n      return doc.implementation.createDocumentType(\n        n.name,\n        n.publicId,\n        n.systemId,\n      );\n    case NodeType.Element:\n      const tagName = getTagName(n);\n      let node: Element;\n      if (n.isSVG) {\n        node = doc.createElementNS('http://www.w3.org/2000/svg', tagName);\n      } else {\n        node = doc.createElement(tagName);\n      }\n      for (const name in n.attributes) {\n        if (!n.attributes.hasOwnProperty(name)) {\n          continue;\n        }\n        let value = n.attributes[name];\n        value = typeof value === 'boolean' ? '' : value;\n        // attribute names start with rr_ are internal attributes added by rrweb\n        if (!name.startsWith('rr_')) {\n          const isTextarea = tagName === 'textarea' && name === 'value';\n          const isRemoteOrDynamicCss =\n            tagName === 'style' && name === '_cssText';\n          if (isRemoteOrDynamicCss && HACK_CSS) {\n            value = addHoverClass(value);\n          }\n          if (isTextarea || isRemoteOrDynamicCss) {\n            const child = doc.createTextNode(value);\n            // https://github.com/rrweb-io/rrweb/issues/112\n            for (const c of Array.from(node.childNodes)) {\n              if (c.nodeType === node.TEXT_NODE) {\n                node.removeChild(c);\n              }\n            }\n            node.appendChild(child);\n            continue;\n          }\n          if (tagName === 'iframe' && name === 'src') {\n            continue;\n          }\n          try {\n            if (n.isSVG && name === 'xlink:href') {\n              node.setAttributeNS('http://www.w3.org/1999/xlink', name, value);\n            } else if (name == 'onload' || name == 'onclick' || name.substring(0, 7) == 'onmouse') {\n              // Rename some of the more common atttributes from https://www.w3schools.com/tags/ref_eventattributes.asp\n              // as setting them triggers a console.error (which shows up despite the try/catch)\n              // Assumption: these attributes are not used to css\n              node.setAttribute('_' + name, value);\n            } else {\n              node.setAttribute(name, value);\n            }\n          } catch (error) {\n            // skip invalid attribute\n          }\n        } else {\n          // handle internal attributes\n          if (tagName === 'canvas' && name === 'rr_dataURL') {\n            const image = document.createElement('img');\n            image.src = value;\n            image.onload = () => {\n              const ctx = (node as HTMLCanvasElement).getContext('2d');\n              if (ctx) {\n                ctx.drawImage(image, 0, 0, image.width, image.height);\n              }\n            };\n          }\n          if (name === 'rr_width') {\n            (node as HTMLElement).style.width = value;\n          }\n          if (name === 'rr_height') {\n            (node as HTMLElement).style.height = value;\n          }\n          if (name === 'rr_mediaState') {\n            switch (value) {\n              case 'played':\n                (node as HTMLMediaElement).play();\n              case 'paused':\n                (node as HTMLMediaElement).pause();\n                break;\n              default:\n            }\n          }\n        }\n      }\n      return node;\n    case NodeType.Text:\n      return doc.createTextNode(\n        n.isStyle && HACK_CSS ? addHoverClass(n.textContent) : n.textContent,\n      );\n    case NodeType.CDATA:\n      return doc.createCDATASection(n.textContent);\n    case NodeType.Comment:\n      return doc.createComment(n.textContent);\n    default:\n      return null;\n  }\n}\n\nexport function buildNodeWithSN(\n  n: serializedNodeWithId,\n  doc: Document,\n  map: idNodeMap,\n  skipChild = false,\n  HACK_CSS = true,\n): INode | null {\n  let node = buildNode(n, doc, HACK_CSS);\n  if (!node) {\n    return null;\n  }\n  // use target document as root document\n  if (n.type === NodeType.Document) {\n    // close before open to make sure document was closed\n    doc.close();\n    doc.open();\n    node = doc;\n  }\n\n  (node as INode).__sn = n;\n  map[n.id] = node as INode;\n  if (\n    (n.type === NodeType.Document || n.type === NodeType.Element) &&\n    !skipChild\n  ) {\n    for (const childN of n.childNodes) {\n      const childNode = buildNodeWithSN(childN, doc, map, false, HACK_CSS);\n      if (!childNode) {\n        console.warn('Failed to rebuild', childN);\n      } else {\n        node.appendChild(childNode);\n      }\n    }\n  }\n  return node as INode;\n}\n\nfunction rebuild(\n  n: serializedNodeWithId,\n  doc: Document,\n  /**\n   * This is not a public API yet, just for POC\n   */\n  HACK_CSS: boolean = true,\n): [Node | null, idNodeMap] {\n  const idNodeMap: idNodeMap = {};\n  return [buildNodeWithSN(n, doc, idNodeMap, false, HACK_CSS), idNodeMap];\n}\n\nexport default rebuild;\n"],"names":["NodeType","_id","symbolAndNumberRegex","RegExp","genId","getValidTagName","tagName","processedTagName","toLowerCase","trim","test","getCssRulesString","s","rules","cssRules","Array","from","reduce","prev","cur","getCssRuleString","error","rule","isCSSImportRule","styleSheet","cssText","extractOrigin","url","indexOf","split","slice","join","URL_IN_CSS_REF","RELATIVE_PATH","DATA_URI","absoluteToStylesheet","href","replace","origin","path1","path2","path3","filePath","stack","parts","pop","parts_1","_i","part","push","getAbsoluteSrcsetString","doc","attributeValue","map","srcItem","urlAndSize","trimLeft","trimRight","length","absoluteToDoc","a","createElement","isSVGElement","el","SVGElement","transformAttribute","name","value","location","serializeNode","n","blockClass","inlineStylesheet","maskAllInputs","nodeType","DOCUMENT_NODE","type","Document","childNodes","DOCUMENT_TYPE_NODE","DocumentType","publicId","systemId","ELEMENT_NODE","needBlock_1","classList","contains","forEach","className","attributes_1","_a","attributes","_b","stylesheet","styleSheets","find","rel","_cssText","sheet","innerText","textContent","repeat","checked","selectValue","parentElement","selected","rr_dataURL","toDataURL","rr_mediaState","paused","_c","width","height","rr_width","rr_height","Element","isSVG","undefined","needBlock","TEXT_NODE","parentTagName","parentNode","isStyle","Text","CDATA_SECTION_NODE","CDATA","COMMENT_NODE","Comment","serializeNodeWithId","skipChild","id","_serializedNode","console","warn","__sn","serializedNode","Object","assign","recordChild","serializedChildNode","snapshot","idNodeMap","commentre","parse","css","options","lineno","column","updatePosition","str","lines","match","i","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","prototype","content","errorsList","msg","err","Error","reason","filename","silent","open","close","comments","charAt","atrule","re","m","exec","c","comment","pos","selector","declaration","propMatch","prop","val","ret","property","declarations","decl","decls","keyframe","vals","values","rulesList","atimport","_compileAtrule","atcharset","atnamespace","vendor","frame","frames","concat","keyframes","atkeyframes","media","style","atmedia","atcustommedia","supports","atsupports","document","atdocument","sel","selectors","atpage","athost","atfontface","addParent","parsingErrors","obj","parent","isNode","childParent","keys","isArray","v","defineProperty","configurable","writable","enumerable","tagMap","script","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","clippath","feblend","fecolormatrix","fecomponenttransfer","fecomposite","feconvolvematrix","fediffuselighting","fedisplacementmap","fedistantlight","fedropshadow","feflood","fefunca","fefuncb","fefuncg","fefuncr","fegaussianblur","feimage","femerge","femergenode","femorphology","feoffset","fepointlight","fespecularlighting","fespotlight","fetile","feturbulence","foreignobject","glyphref","lineargradient","radialgradient","getTagName","HOVER_SELECTOR","addHoverClass","ast","newSelector","buildNode","HACK_CSS","implementation","createDocument","createDocumentType","node_1","createElementNS","hasOwnProperty","startsWith","image_1","src","onload","ctx","getContext","drawImage","play","pause","isTextarea","isRemoteOrDynamicCss","child","createTextNode","removeChild","appendChild","setAttributeNS","substring","setAttribute","createCDATASection","createComment","buildNodeWithSN","childN","childNode","rebuild"],"mappings":"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"}